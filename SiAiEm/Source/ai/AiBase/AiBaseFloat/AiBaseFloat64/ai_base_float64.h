/**
 ******************************************************************************
 * file    ai_base_float64.h
 * author  sunlingge
 * version V100
 * brief   the ai base float 64 driver.
 ******************************************************************************
 */
#ifndef AI_BASE_FLOAT64_H
#define AI_BASE_FLOAT64_H

#ifdef __cplusplus
extern "C" {
#endif

#if (AI_BASE_FLOAT_FP64 == 1)
/*------------------------- Include File ------------------------------------*/

/*------------------------- Pre Type Definition -----------------------------*/
#define AI_BASE_FLOAT64_F_UINT					UINT32_T
#define AI_BASE_FLOAT64_F_ULONG					UINT64_T

/*------------------------- Macro Definition --------------------------------*/
/* 32 bit floats */
#define AI_BASE_FLOAT64_FSIGN_MASK32			(1 << 31)

#define AI_BASE_FLOAT64_F_SIZE					(32)
#define AI_BASE_FLOAT64_MANT_SIZE				(23)
#define AI_BASE_FLOAT64_EXP_SIZE				(8)

#define AI_BASE_FLOAT64_EXP_MASK				((1 << AI_BASE_FLOAT64_EXP_SIZE) - 1)
#define AI_BASE_FLOAT64_MANT_MASK				(((AI_BASE_FLOAT64_F_UINT)1 << AI_BASE_FLOAT64_MANT_SIZE) - 1)
#define AI_BASE_FLOAT64_SIGN_MASK				((AI_BASE_FLOAT64_F_UINT)1 << (AI_BASE_FLOAT64_F_SIZE - 1))
#define AI_BASE_FLOAT64_IMANT_SIZE				(AI_BASE_FLOAT64_F_SIZE - 2) /* internal mantissa size */
#define AI_BASE_FLOAT64_RND_SIZE				(AI_BASE_FLOAT64_IMANT_SIZE - AI_BASE_FLOAT64_MANT_SIZE)
#define AI_BASE_FLOAT64_QNAN_MASK				((AI_BASE_FLOAT64_F_UINT)1 << (AI_BASE_FLOAT64_MANT_SIZE - 1))

/* quiet NaN */
#define AI_BASE_FLOAT64_F_SIZE_STR				32
#define AI_BASE_FLOAT64_F_QNAN					AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_F_QNAN, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_CLZ						AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_CLZ_U, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_PACK_SF					AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_PACK_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_UNPACK_SF				AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_UNPACK_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_RSHIFT_RND				AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_RSHIFT_RND, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_ROUND_PACK_SF			AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_ROUND_PACK_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_NORMALIZE_SF			AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_NORMALIZE_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_NORMALIZE2_SF			AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_NORMALIZE2_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_ISSIGNAN_SF				AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_ISSIGNAN_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_ISNAN_SF				AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_ISNAN_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_ADD_SF					AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_ADD_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_MUL_SF					AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_MUL_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_FMA_SF					AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_FMA_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_DIV_SF					AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_DIV_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_SQRT_SF					AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_SQRT_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_NORMALIZE_SUBNORMAL_SF	AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_NORMALIZE_SUBNORMAL_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_DIVREM_U				AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_DIVREM_U, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_SQRTREM_U				AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_SQRTREM_U, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_MUL_U					AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_MUL_U, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_CVT_SF32_SF				AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_CVT_SF32_SF, AI_BASE_FLOAT64_F_SIZE_STR)
#define AI_BASE_FLOAT64_CVT_SF64_SF				AI_BASE_FLOAT64_GLUE(AI_BASE_FLOAT64_CVT_SF64_SF, AI_BASE_FLOAT64_F_SIZE_STR)

#define AI_BASE_FLOAT64_F_QNAN32				(((AI_BASE_FLOAT64_F_UINT)AI_BASE_FLOAT64_EXP_MASK << AI_BASE_FLOAT64_MANT_SIZE) | ((AI_BASE_FLOAT64_F_UINT)1 << (AI_BASE_FLOAT64_MANT_SIZE - 1)))

#ifdef AI_BASE_FLOAT64_F_ULONG
#else
#define AI_BASE_FLOAT64_FH_SIZE					(AI_BASE_FLOAT64_F_SIZE / 2)
#endif

/*------------------------- Type Definition----------------------------------*/

/*------------------------- Function Definition -----------------------------*/
AI_BASE_FLOAT64_F_UINT AiBaseFloat64PackSf(UINT32_T a_sign, UINT32_T a_exp, AI_BASE_FLOAT64_F_UINT a_mant);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64UnpackSf(UINT32_T *pa_sign, INT32_T *pa_exp, AI_BASE_FLOAT64_F_UINT a);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64RshiftRnd(AI_BASE_FLOAT64_F_UINT a, INT32_T d);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64RoundPackSf(UINT32_T a_sign, INT32_T a_exp, AI_BASE_FLOAT64_F_UINT a_mant, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64NormalizeSf(UINT32_T a_sign, INT32_T a_exp, AI_BASE_FLOAT64_F_UINT a_mant, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64Normalize2Sf(UINT32_T a_sign, INT32_T a_exp, AI_BASE_FLOAT64_F_UINT a_mant1, AI_BASE_FLOAT64_F_UINT a_mant0, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
BOOL_T AiBaseFloat64IssignanSf(AI_BASE_FLOAT64_F_UINT a);
BOOL_T AiBaseFloat64IsnanSf(AI_BASE_FLOAT64_F_UINT a);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64AddSf(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64SubSf32(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64NormalizeSubnormalSf(INT32_T *pa_exp, AI_BASE_FLOAT64_F_UINT a_mant);
#ifdef AI_BASE_FLOAT64_F_ULONG
AI_BASE_FLOAT64_F_UINT AiBaseFloat64MulU(AI_BASE_FLOAT64_F_UINT *plow, AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b);
#else
#if 0
AI_BASE_FLOAT64_F_UINT AiBaseFloat64MulU(AI_BASE_FLOAT64_F_UINT *plow, AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b);
#endif
#endif
AI_BASE_FLOAT64_F_UINT AiBaseFloat64MulSf(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64FmaSf(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, AI_BASE_FLOAT64_F_UINT c, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
#ifdef AI_BASE_FLOAT64_F_ULONG
AI_BASE_FLOAT64_F_UINT AiBaseFloat64DivremU(AI_BASE_FLOAT64_F_UINT *pr, AI_BASE_FLOAT64_F_UINT ah, AI_BASE_FLOAT64_F_UINT al, AI_BASE_FLOAT64_F_UINT b);
#else
AI_BASE_FLOAT64_F_UINT AiBaseFloat64DivremU(AI_BASE_FLOAT64_F_UINT *pr, AI_BASE_FLOAT64_F_UINT a1, AI_BASE_FLOAT64_F_UINT a0, AI_BASE_FLOAT64_F_UINT b);
#endif
AI_BASE_FLOAT64_F_UINT AiBaseFloat64DivSf(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
#ifdef AI_BASE_FLOAT64_F_ULONG
INT32_T AiBaseFloat64SqrtremU(AI_BASE_FLOAT64_F_UINT *pr, AI_BASE_FLOAT64_F_UINT ah, AI_BASE_FLOAT64_F_UINT al);
#else
INT32_T AiBaseFloat64SqrtremU(AI_BASE_FLOAT64_F_UINT *pr, AI_BASE_FLOAT64_F_UINT a1, AI_BASE_FLOAT64_F_UINT a0);
#endif
AI_BASE_FLOAT64_F_UINT AiBaseFloat64SqrtSf(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_ROUNDING_MODE_ENUM rm, UINT32_T *pfflags);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64MinSf32(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, UINT32_T *pfflags);
AI_BASE_FLOAT64_F_UINT AiBaseFloat64MaxSf32(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, UINT32_T *pfflags);
INT32_T AiBaseFloat64EqQuietSf32(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, UINT32_T *pfflags);
INT32_T AiBaseFloat64LeSf32(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, UINT32_T *pfflags);
INT32_T AiBaseFloat64LtSf32(AI_BASE_FLOAT64_F_UINT a, AI_BASE_FLOAT64_F_UINT b, UINT32_T *pfflags);
UINT32_T AiBaseFloat64FclassSf32(AI_BASE_FLOAT64_F_UINT a);

/*------------------------- End ---------------------------------------------*/
#endif

#ifdef __cplusplus
}
#endif

#endif
/*------------------------- End ---------------------------------------------*/

